/**
 * MappingMapToText_file.java
 *
 * This file was generated by MapForce 2012r2sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToText_file extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		java.lang.String var1_InputFilename;
	
		public main(java.lang.String var1_InputFilename)
		{
			this.var1_InputFilename = var1_InputFilename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			com.altova.mapforce.IEnumerable var2_if_is_filename_with_wildcard;
			com.altova.mapforce.IMFNode var3_webservice;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_if_is_filename_with_wildcard = new com.altova.functions.Core.SequenceCache((new seq1_if_is_filename_with_wildcard(closure.var1_InputFilename)));
				var3_webservice = com.altova.xml.InternalXML.callWebservice(com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Envelope", "http://www.w3.org/2003/05/soap-envelope"), com.altova.functions.Core.box(com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Body", "http://www.w3.org/2003/05/soap-envelope"), com.altova.functions.Core.box(com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("SubmitOrder", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq2_seq_(var2_if_is_filename_with_wildcard))))))), "EPMS_Connect", "SubmitOrder", com.altova.functions.Lang.stringAsQName("{http://localhost/EnterpriseWebService/Enterprise Connect}SubmitOrder"), "http://localhost/EnterpriseWebService/Enterprise Connect/SubmitOrder", "http://sqlserver/EnterpriseWebService/service.asmx", "document", "", "", 0, "", "", 2);
				current = com.altova.functions.Core.createElement("Rows", (new seq26_join(var3_webservice)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("Rows", (new seq29_join(var2_if_is_filename_with_wildcard)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("Rows", (new seq31_join(var2_if_is_filename_with_wildcard)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createElement("Rows", (new seq33_join(var2_if_is_filename_with_wildcard)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("Rows", (new seq35_join(var3_webservice)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_if_is_filename_with_wildcard implements IEnumerable
	{
		java.lang.String var1_InputFilename;
	
		public seq1_if_is_filename_with_wildcard(java.lang.String var1_InputFilename)
		{
			this.var1_InputFilename = var1_InputFilename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_if_is_filename_with_wildcard closure;
			IEnumerator var2_resolve_filename;
			com.altova.mapforce.IMFNode var4_instance;
			com.altova.mapforce.IMFNode var3_instance;
			public Enumerator(seq1_if_is_filename_with_wildcard closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				if (!(com.mapforce.core.is_filename_with_wildcard.eval(closure.var1_InputFilename))) {state = 2; return false; }
				var2_resolve_filename = (com.altova.functions.Core.resolveFilename(closure.var1_InputFilename)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				{
							com.altova.io.Input file = com.altova.io.StreamInput.createInput(closure.var1_InputFilename);
							var4_instance = new com.altova.xml.DOMDocumentAsMFNodeAdapter(XmlTreeOperations.loadDocument(file), file.getFilename());
							file.close();
				}
				current = var4_instance;
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_resolve_filename.moveNext()) {state = 4; return false; }
				{
							com.altova.io.Input file = com.altova.io.StreamInput.createInput(((java.lang.String)(var2_resolve_filename.current())));
							var3_instance = new com.altova.xml.DOMDocumentAsMFNodeAdapter(XmlTreeOperations.loadDocument(file), file.getFilename());
							file.close();
				}
				current = var3_instance;
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_resolve_filename.close(); var2_resolve_filename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_resolve_filename.close(); var2_resolve_filename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_seq_ implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq2_seq_(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_seq_ closure;
			public Enumerator(seq2_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Credentials", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq3_seq_()));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Order", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq4_join(closure.var1_if_is_filename_with_wildcard)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_seq_ implements IEnumerable
	{
	
		public seq3_seq_()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_seq_ closure;
			public Enumerator(seq3_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Username", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box("anderson"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Password", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box("D5761a71v855e"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq4_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter;
			IEnumerator var4_if_is_filename_with_wildcard;
			IEnumerator var5_filter;
			IEnumerator var6_if_is_filename_with_wildcard;
			IEnumerator var7_filter;
			IEnumerator var8_if_is_filename_with_wildcard;
			IEnumerator var9_filter;
			IEnumerator var10_if_is_filename_with_wildcard;
			IEnumerator var11_filter;
			IEnumerator var12_group_by;
			com.altova.mapforce.IEnumerable var13_group_items;
			public Enumerator(seq4_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 3; return false; }
				var3_filter = ((new seq5_filter(((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 7;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				var4_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_filter.moveNext()) {state = 5; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("CustAccount", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("AccountField1", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current()))))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter.close(); var3_filter = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!var4_if_is_filename_with_wildcard.moveNext()) {state = 8; return false; }
				var5_filter = ((new seq6_filter(((com.altova.mapforce.IMFNode)(var4_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 12;				
				var4_if_is_filename_with_wildcard.close(); var4_if_is_filename_with_wildcard = null;
				var6_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var5_filter.moveNext()) {state = 10; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("JobDescription", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Numerator", ""), ((com.altova.mapforce.IMFNode)(var5_filter.current()))))), "  "), "Order ID# "), com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderID", ""), ((com.altova.mapforce.IMFNode)(var5_filter.current())))))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 7;				
				var5_filter.close(); var5_filter = null;
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 14;				
				if (!var6_if_is_filename_with_wildcard.moveNext()) {state = 13; return false; }
				var7_filter = ((new seq8_filter(((com.altova.mapforce.IMFNode)(var6_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 17;				
				var6_if_is_filename_with_wildcard.close(); var6_if_is_filename_with_wildcard = null;
				var8_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 14;				
				if (!var7_filter.moveNext()) {state = 15; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("DueDate", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.DateTimeToString(com.altova.CoreTypes.parseDateTime(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("RequiredDateISO", ""), ((com.altova.mapforce.IMFNode)(var7_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 12;				
				var7_filter.close(); var7_filter = null;
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 19;				
				if (!var8_if_is_filename_with_wildcard.moveNext()) {state = 18; return false; }
				var9_filter = ((new seq9_filter(((com.altova.mapforce.IMFNode)(var8_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 22;				
				var8_if_is_filename_with_wildcard.close(); var8_if_is_filename_with_wildcard = null;
				var10_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 19;				
				if (!var9_filter.moveNext()) {state = 20; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("OrderDate", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.DateTimeToString(com.altova.CoreTypes.parseDateTime(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderDateISO", ""), ((com.altova.mapforce.IMFNode)(var9_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_20() throws Exception {
				state = 17;				
				var9_filter.close(); var9_filter = null;
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 24;				
				if (!var10_if_is_filename_with_wildcard.moveNext()) {state = 23; return false; }
				var11_filter = ((new seq10_filter(((com.altova.mapforce.IMFNode)(var10_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 27;				
				var10_if_is_filename_with_wildcard.close(); var10_if_is_filename_with_wildcard = null;
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("UserDefinedField5", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box("Online Internet Order"));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 24;				
				if (!var11_filter.moveNext()) {state = 25; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("FormNumber", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderField3", ""), ((com.altova.mapforce.IMFNode)(var11_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_25() throws Exception {
				state = 22;				
				var11_filter.close(); var11_filter = null;
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 28;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Components", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq11_join(closure.var1_if_is_filename_with_wildcard)));
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 29;				
				var12_group_by = (com.altova.functions.Core.groupBy((new seq14_join(closure.var1_if_is_filename_with_wildcard)), (new seq15_cond_box_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 29;				
				if (!var12_group_by.moveNext()) {state = 30; return false; }
				var13_group_items = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.groupItems(((com.altova.functions.Core.Group)(var12_group_by.current()))));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Shipments", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Shipment", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq16_join(var13_group_items)))));
				pos++;
				return true;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var12_group_by.close(); var12_group_by = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				var5_filter.close(); var5_filter = null;
				var4_if_is_filename_with_wildcard.close(); var4_if_is_filename_with_wildcard = null;
				var7_filter.close(); var7_filter = null;
				var6_if_is_filename_with_wildcard.close(); var6_if_is_filename_with_wildcard = null;
				var9_filter.close(); var9_filter = null;
				var8_if_is_filename_with_wildcard.close(); var8_if_is_filename_with_wildcard = null;
				var11_filter.close(); var11_filter = null;
				var10_if_is_filename_with_wildcard.close(); var10_if_is_filename_with_wildcard = null;
				var12_group_by.close(); var12_group_by = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq5_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq5_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("AccountField1", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq6_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_filter closure;
			IEnumerator var2_filter;
			public Enumerator(seq6_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq7_filter(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderID", ""), ((com.altova.mapforce.IMFNode)(var2_filter.current())))))) {state = 2; return false; }
				current = var2_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq7_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq7_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Numerator", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq8_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq8_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("RequiredDateISO", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq9_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq9_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderDateISO", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq10_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq10_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderField3", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq11_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter_elements_qname;
			IEnumerator var4_filter_elements_qname;
			com.altova.mapforce.IEnumerable var5_filter_attributes_qname;
			com.altova.mapforce.IEnumerable var6_filter_attributes_qname;
			com.altova.mapforce.IEnumerable var7_filter_attributes_qname;
			com.altova.mapforce.IEnumerable var8_filter_attributes_qname;
			com.altova.mapforce.IEnumerable var9_filter_attributes_qname;
			com.altova.mapforce.IEnumerable var10_filter_attributes_qname;
			public Enumerator(seq11_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 3; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), ((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 5; return false; }
				var4_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("job", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var4_filter_elements_qname.moveNext()) {state = 7; return false; }
				var5_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("TemplateRefCode", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				var6_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("copies", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				var7_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Numerator", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current()))));
				var8_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("templateName", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				var9_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("TemplateSubject", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				var10_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("totalNoTax", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Component", "http://localhost/EnterpriseWebService/Enterprise Connect"), (new seq12_join(var7_filter_attributes_qname, ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current())), var5_filter_attributes_qname, var8_filter_attributes_qname, var6_filter_attributes_qname, var9_filter_attributes_qname, var10_filter_attributes_qname)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_attributes_qname;
		com.altova.mapforce.IMFNode var2_current;
		com.altova.mapforce.IEnumerable var3_filter_attributes_qname;
		com.altova.mapforce.IEnumerable var4_filter_attributes_qname;
		com.altova.mapforce.IEnumerable var5_filter_attributes_qname;
		com.altova.mapforce.IEnumerable var6_filter_attributes_qname;
		com.altova.mapforce.IEnumerable var8_filter_attributes_qname;
	
		public seq12_join(com.altova.mapforce.IEnumerable var1_filter_attributes_qname, com.altova.mapforce.IMFNode var2_current, com.altova.mapforce.IEnumerable var3_filter_attributes_qname, com.altova.mapforce.IEnumerable var4_filter_attributes_qname, com.altova.mapforce.IEnumerable var5_filter_attributes_qname, com.altova.mapforce.IEnumerable var6_filter_attributes_qname, com.altova.mapforce.IEnumerable var8_filter_attributes_qname)
		{
			this.var1_filter_attributes_qname = var1_filter_attributes_qname;
			this.var2_current = var2_current;
			this.var3_filter_attributes_qname = var3_filter_attributes_qname;
			this.var4_filter_attributes_qname = var4_filter_attributes_qname;
			this.var5_filter_attributes_qname = var5_filter_attributes_qname;
			this.var6_filter_attributes_qname = var6_filter_attributes_qname;
			this.var8_filter_attributes_qname = var8_filter_attributes_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_join closure;
			IEnumerator var7_filter;
			public Enumerator(seq12_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 10;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_attributes_qname))) {state = 10; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("id", ""), closure.var2_current)))) {state = 10; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CustomerRefCode", ""), closure.var2_current)))) {state = 10; return false; }
				if (!(com.altova.functions.Core.exists(closure.var3_filter_attributes_qname))) {state = 10; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Description", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_attributes_qname)), "  "), "Job# "), com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("id", ""), closure.var2_current))))))))))), "  "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CustomerRefCode", ""), closure.var2_current)))), "  "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_attributes_qname)))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(closure.var4_filter_attributes_qname))) {state = 13; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("DetailDescription", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var4_filter_attributes_qname))));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 16;				
				if (!(com.altova.functions.Core.exists(closure.var5_filter_attributes_qname))) {state = 16; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("QuantityOrdered", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var5_filter_attributes_qname)))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists(closure.var6_filter_attributes_qname))) {state = 19; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("TemplateCode", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var6_filter_attributes_qname))));
				pos++;
				return true;
			}
			private boolean moveNext_19() throws Exception {
				state = 22;				
				if (!(com.altova.functions.Core.exists(closure.var3_filter_attributes_qname))) {state = 22; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("FinGoodCode", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_attributes_qname))));
				pos++;
				return true;
			}
			private boolean moveNext_22() throws Exception {
				state = 23;				
				var7_filter = ((new seq13_filter(closure.var2_current))).enumerator();
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 23;				
				if (!var7_filter.moveNext()) {state = 24; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("PressInstructions", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("ProductID", ""), ((com.altova.mapforce.IMFNode)(var7_filter.current()))))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var7_filter.close(); var7_filter = null;
				if (!(com.altova.functions.Core.exists(closure.var8_filter_attributes_qname))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("SellPrice", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.functions.Core.ParseNumber(com.altova.functions.Core.translate(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var8_filter_attributes_qname))))))))), com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.mapforce.core.firstCharacter.eval(".", ".")), (java.lang.String)com.altova.functions.Core.first(com.mapforce.core.firstCharacter.eval(",", ","))), ".,"), "#,##0.00"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var7_filter.close(); var7_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq13_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq13_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("shipping", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("ProductID", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq14_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter_elements_qname;
			IEnumerator var4_filter_elements_qname;
			IEnumerator var5_filter_elements_qname;
			public Enumerator(seq14_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 3; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), ((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 5; return false; }
				var4_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("job", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_filter_elements_qname.moveNext()) {state = 7; return false; }
				var5_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("shipping", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_filter_elements_qname.moveNext()) {state = 9; return false; }
				current = var5_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				var5_filter_elements_qname.close(); var5_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var5_filter_elements_qname.close(); var5_filter_elements_qname = null;
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq15_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_cond_box closure;
			com.altova.mapforce.IEnumerable var2_filter_attributes_qname;
			public Enumerator(seq15_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_filter_attributes_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("AddressID", ""), closure.var1_current));
				if (!(com.altova.functions.Core.exists(var2_filter_attributes_qname))) {state = 0; return false; }
				current = com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var2_filter_attributes_qname)))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq15_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq15_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq15_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq16_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq16_join(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_join closure;
			IEnumerator var2_filter;
			IEnumerator var3_filter;
			IEnumerator var4_filter;
			IEnumerator var5_filter;
			IEnumerator var6_filter;
			IEnumerator var7_filter;
			IEnumerator var8_filter;
			IEnumerator var9_filter;
			public Enumerator(seq16_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq17_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipName", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CompanyName", ""), ((com.altova.mapforce.IMFNode)(var2_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var2_filter.close(); var2_filter = null;
				var3_filter = ((new seq18_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_filter.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipAddress1", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Street", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				var3_filter.close(); var3_filter = null;
				var4_filter = ((new seq19_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var4_filter.moveNext()) {state = 9; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipCity", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("City", ""), ((com.altova.mapforce.IMFNode)(var4_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				var4_filter.close(); var4_filter = null;
				var5_filter = ((new seq20_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 11;				
				if (!var5_filter.moveNext()) {state = 12; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipState", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("State", ""), ((com.altova.mapforce.IMFNode)(var5_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 14;				
				var5_filter.close(); var5_filter = null;
				var6_filter = ((new seq21_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 14;				
				if (!var6_filter.moveNext()) {state = 15; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipZip", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("ZipCode", ""), ((com.altova.mapforce.IMFNode)(var6_filter.current()))))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				var6_filter.close(); var6_filter = null;
				var7_filter = ((new seq22_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 17;				
				if (!var7_filter.moveNext()) {state = 18; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipContact", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("FirstName", ""), ((com.altova.mapforce.IMFNode)(var7_filter.current()))))), " "), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("LastName", ""), ((com.altova.mapforce.IMFNode)(var7_filter.current()))))))));
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 20;				
				var7_filter.close(); var7_filter = null;
				var8_filter = ((new seq24_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 20;				
				if (!var8_filter.moveNext()) {state = 21; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShipPhone", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Phone", ""), ((com.altova.mapforce.IMFNode)(var8_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				var8_filter.close(); var8_filter = null;
				var9_filter = ((new seq25_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 23;				
				if (!var9_filter.moveNext()) {state = 24; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Email", "http://localhost/EnterpriseWebService/Enterprise Connect"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Email", ""), ((com.altova.mapforce.IMFNode)(var9_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var9_filter.close(); var9_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				var3_filter.close(); var3_filter = null;
				var4_filter.close(); var4_filter = null;
				var5_filter.close(); var5_filter = null;
				var6_filter.close(); var6_filter = null;
				var7_filter.close(); var7_filter = null;
				var8_filter.close(); var8_filter = null;
				var9_filter.close(); var9_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq17_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq17_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CompanyName", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq18_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq18_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Street", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq19_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq19_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("City", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq20_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq20_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("State", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq21_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq21_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("ZipCode", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq22_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_filter closure;
			IEnumerator var2_filter;
			public Enumerator(seq22_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq23_filter(closure.var1_group_items))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("LastName", ""), ((com.altova.mapforce.IMFNode)(var2_filter.current())))))) {state = 2; return false; }
				current = var2_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq23_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq23_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("FirstName", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq24_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq24_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Phone", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_group_items;
	
		public seq25_filter(com.altova.mapforce.IEnumerable var1_group_items)
		{
			this.var1_group_items = var1_group_items;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_filter closure;
			IEnumerator var2_group_items;
			public Enumerator(seq25_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_group_items = (closure.var1_group_items).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_group_items.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Email", ""), ((com.altova.mapforce.IMFNode)(var2_group_items.current())))))) {state = 2; return false; }
				current = var2_group_items.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_group_items.close(); var2_group_items = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_group_items.close(); var2_group_items = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_webservice;
	
		public seq26_join(com.altova.mapforce.IMFNode var1_webservice)
		{
			this.var1_webservice = var1_webservice;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_join closure;
			com.altova.mapforce.IMFNode var2_webservice;
			IEnumerator var3_filter_elements_qname;
			IEnumerator var4_filter_elements_qname;
			IEnumerator var5_filter;
			public Enumerator(seq26_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Column13", com.altova.functions.Core.box("Result:"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_webservice = closure.var1_webservice;
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Fault", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Body", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Envelope", "http://www.w3.org/2003/05/soap-envelope"), var2_webservice)))))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var3_filter_elements_qname.moveNext()) {state = 4; return false; }
				var4_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("detail", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 7;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var5_filter = ((new seq27_filter(var2_webservice))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_filter_elements_qname.moveNext()) {state = 6; return false; }
				com.altova.functions.Core.throwUserException(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var5_filter.moveNext()) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("Column2", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var5_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var5_filter.close(); var5_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var5_filter.close(); var5_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_result;
	
		public seq27_filter(com.altova.mapforce.IMFNode var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_filter closure;
			IEnumerator var2_filter;
			public Enumerator(seq27_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq28_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var2_filter.current())))))))) {state = 2; return false; }
				current = var2_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_result;
	
		public seq28_filter(com.altova.mapforce.IMFNode var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq28_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResponse", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Body", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Envelope", "http://www.w3.org/2003/05/soap-envelope"), closure.var1_result)))))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq29_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter;
			public Enumerator(seq29_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Column13", com.altova.functions.Core.box("Date Ordered:"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 4; return false; }
				var3_filter = ((new seq30_filter(((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_filter.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement("Column2", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderDate", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq30_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq30_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderDate", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq31_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter;
			public Enumerator(seq31_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Column13", com.altova.functions.Core.box("Order Number:"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 4; return false; }
				var3_filter = ((new seq32_filter(((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_filter.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement("Column2", com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderID", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current()))))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq32_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq32_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("OrderID", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard;
	
		public seq33_join(com.altova.mapforce.IEnumerable var1_if_is_filename_with_wildcard)
		{
			this.var1_if_is_filename_with_wildcard = var1_if_is_filename_with_wildcard;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_join closure;
			IEnumerator var2_if_is_filename_with_wildcard;
			IEnumerator var3_filter;
			public Enumerator(seq33_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Column13", com.altova.functions.Core.box("Customer Name:"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_if_is_filename_with_wildcard = (closure.var1_if_is_filename_with_wildcard).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_if_is_filename_with_wildcard.moveNext()) {state = 4; return false; }
				var3_filter = ((new seq34_filter(((com.altova.mapforce.IMFNode)(var2_if_is_filename_with_wildcard.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_filter.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement("Column2", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CompanyName", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				var2_if_is_filename_with_wildcard.close(); var2_if_is_filename_with_wildcard = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq34_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq34_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("order", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("CompanyName", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_webservice;
	
		public seq35_join(com.altova.mapforce.IMFNode var1_webservice)
		{
			this.var1_webservice = var1_webservice;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_join closure;
			com.altova.mapforce.IMFNode var2_webservice;
			IEnumerator var3_filter_elements_qname;
			IEnumerator var4_filter_elements_qname;
			IEnumerator var5_filter;
			public Enumerator(seq35_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Column13", com.altova.functions.Core.box("Job #:"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_webservice = closure.var1_webservice;
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Fault", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Body", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Envelope", "http://www.w3.org/2003/05/soap-envelope"), var2_webservice)))))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var3_filter_elements_qname.moveNext()) {state = 4; return false; }
				var4_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("detail", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 7;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var5_filter = ((new seq36_filter(var2_webservice))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_filter_elements_qname.moveNext()) {state = 6; return false; }
				com.altova.functions.Core.throwUserException(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter_elements_qname.current()))));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var5_filter.moveNext()) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("Column2", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("JobNumber", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var5_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var5_filter.close(); var5_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_qname.close(); var4_filter_elements_qname = null;
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var5_filter.close(); var5_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_result;
	
		public seq36_filter(com.altova.mapforce.IMFNode var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_filter closure;
			IEnumerator var2_filter;
			public Enumerator(seq36_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq37_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("JobNumber", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var2_filter.current())))))))) {state = 2; return false; }
				current = var2_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_result;
	
		public seq37_filter(com.altova.mapforce.IMFNode var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_filter closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq37_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResponse", "http://localhost/EnterpriseWebService/Enterprise Connect"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Body", "http://www.w3.org/2003/05/soap-envelope"), (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Envelope", "http://www.w3.org/2003/05/soap-envelope"), closure.var1_result)))))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubmitOrderResult", "http://localhost/EnterpriseWebService/Enterprise Connect"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))))) {state = 2; return false; }
				current = var2_filter_elements_qname.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		java.lang.String var1_InputFilename;
	
		public Outer(java.lang.String var1_InputFilename)
		{
			this.var1_InputFilename = var1_InputFilename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_seq_;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_seq_ = ((new main(closure.var1_InputFilename))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_seq_.moveNext()) {state = 3; return false; }
				current = var2_seq_.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_seq_.close(); var2_seq_ = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_seq_.close(); var2_seq_ = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected String varInputFilename;

	public void run(String InputFilenameSourceParameter, String Text_file2TargetFilename) throws Exception {
		// open source streams
		// open target stream
		com.altova.io.FileOutput Text_file2Target = new com.altova.io.FileOutput(Text_file2TargetFilename);

		// run
		run(InputFilenameSourceParameter, Text_file2Target);

		// close source streams
		// close target stream
		writeTrace("Saving " + Text_file2TargetFilename + "...\n");
		Text_file2Target.close();
	}


	// main entry point

	public void run(String InputFilenameSourceParameter, com.altova.io.Output Text_file2Target) throws Exception {
		// Open the source(s)
			varInputFilename = InputFilenameSourceParameter;


		// Create the target
		com.altova.text.tablelike.flf.Table Text_file2TargetDoc = new com.altova.text.tablelike.flf.Table(com.mapforce.Text_file.Text_file_TypeInfo.binder.getTypes()[com.mapforce.Text_file.Text_file_TypeInfo._altova_ti_altova_RowsType]);
		com.altova.text.tablelike.Table Text_file2TargetObject = Text_file2TargetDoc;
			Text_file2TargetDoc.getFormat().setFillCharacter( ' ' );
			Text_file2TargetDoc.getFormat().setAssumeRecordDelimitersPresent( true );
			Text_file2TargetDoc.getFormat().setRemoveEmpty( true );

		// Execute mapping

		main mapping = new main(InputFilenameSourceParameter);

		com.altova.text.MFTextWriter.write(mapping, Text_file2TargetObject);
		// Close the target
		Text_file2TargetDoc.setEncoding( "UTF-8", false, false );
		Text_file2TargetDoc.save(Text_file2Target);

		
		if (runDoesCloseAll)
		{
			Text_file2Target.close();
		}
	}



}
